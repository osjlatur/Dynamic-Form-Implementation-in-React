import React, { useState } from 'react';
import './App.css';

const App = () => {
  const [formType, setFormType] = useState('');
  const [formFields, setFormFields] = useState([]);
  const [formData, setFormData] = useState({});
  const [submittedData, setSubmittedData] = useState([]);
  const [errors, setErrors] = useState({});
  const [progress, setProgress] = useState(0);
  const [successMessage, setSuccessMessage] = useState('');

  
  const apiResponses = {
    userInformation: {
      fields: [
        { name: 'firstName', type: 'text', label: 'First Name', required: true },
        { name: 'lastName', type: 'text', label: 'Last Name', required: true },
        { name: 'age', type: 'number', label: 'Age', required: false },
      ],
    },
    addressInformation: {
      fields: [
        { name: 'street', type: 'text', label: 'Street', required: true },
        { name: 'city', type: 'text', label: 'City', required: true },
        {
          name: 'state',
          type: 'dropdown',
          label: 'State',
          options: ['California', 'Texas', 'New York'],
          required: true,
        },
        { name: 'zipCode', type: 'text', label: 'Zip Code', required: false },
      ],
    },
    paymentInformation: {
      fields: [
        { name: 'cardNumber', type: 'text', label: 'Card Number', required: true },
        { name: 'expiryDate', type: 'date', label: 'Expiry Date', required: true },
        { name: 'cvv', type: 'password', label: 'CVV', required: true },
        { name: 'cardholderName', type: 'text', label: 'Cardholder Name', required: true },
      ],
    },
  };

  const handleFormTypeChange = (e) => {
    const selectedFormType = e.target.value;
    setFormType(selectedFormType);
    setFormFields(apiResponses[selectedFormType]?.fields || []);
    setFormData({});
    setErrors({});
    setProgress(0);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });

    // Update progress
    const completedFields = formFields.filter(
      (field) => field.required && formData[field.name]
    ).length;
    setProgress(((completedFields + 1) / formFields.length) * 100); // Adjusted for new input
  };

  const validateForm = () => {
    const newErrors = {};
    formFields.forEach((field) => {
      if (field.required && !formData[field.name]) {
        newErrors[field.name] = `${field.label} is required`;
      }
    });
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (validateForm()) {
      setSubmittedData([...submittedData, formData]);
      setSuccessMessage('Form submitted successfully!');
      setFormData({});
      setProgress(0);
    }
  };

  const handleDelete = (index) => {
    const newData = submittedData.filter((_, i) => i !== index);
    setSubmittedData(newData);
    setSuccessMessage('Entry deleted successfully.');
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>Dynamic Form Implementation</h1>
      </header>
      <main>
        <div className="form-type-selector">
          <label>Select Form Type: </label>
          <select value={formType} onChange={handleFormTypeChange}>
            <option value="">Select...</option>
            <option value="userInformation">User Information</option>
            <option value="addressInformation">Address Information</option>
            <option value="paymentInformation">Payment Information</option>
          </select>
        </div>

        <form onSubmit={handleSubmit}>
          {formFields.map((field) => (
            <div key={field.name} className="form-field">
              <label>{field.label}</label>
              {field.type === 'dropdown' ? (
                <select
                  name={field.name}
                  onChange={handleChange}
                  value={formData[field.name] || ''}
                >
                  <option value="">Select...</option>
                  {field.options.map((option) => (
                    <option key={option} value={option}>
                      {option}
                    </option>
                  ))}
                </select>
              ) : (
                <input
                  type={field.type}
                  name={field.name}
                  value={formData[field.name] || ''}
                  onChange={handleChange}
                />
              )}
              {errors[field.name] && (
                <span className="error">{errors[field.name]}</span>
              )}
            </div>
          ))}
          {formFields.length > 0 && <button type="submit">Submit</button>}
        </form>

        {successMessage && <div className="success-message">{successMessage}</div>}

        {submittedData.length > 0 && (
          <div className="submitted-data">
            <h2>Submitted Data</h2>
            <table>
              <thead>
                <tr>
                  {Object.keys(submittedData[0]).map((key) => (
                    <th key={key}>{key}</th>
                  ))}
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                {submittedData.map((data, index) => (
                  <tr key={index}>
                    {Object.values(data).map((value, idx) => (
                      <td key={idx}>{value}</td>
                    ))}
                    <td>
                      <button onClick={() => handleDelete(index)}>Delete</button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}

        {formFields.length > 0 && (
          <div className="progress-bar">
            <label>Progress:</label>
            <div className="progress-container">
              <div
                className="progress"
                style={{ width: `${progress}%` }}
              ></div>
            </div>
          </div>
        )}
      </main>
      <footer className="App-footer">
        <p>&copy; 2024 Dynamic Form Application</p>
      </footer>
    </div>
  );
};

export default App;
